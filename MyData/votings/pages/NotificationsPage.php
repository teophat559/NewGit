<?php
// NotificationsPage.php - Trang qu·∫£n l√Ω l·ªãch s·ª≠ th√¥ng b√°o ho√†n ch·ªânh
$pageTitle = 'L·ªãch s·ª≠ th√¥ng b√°o';
?>

<div class="content-header">
    <h1><i class="fas fa-bell"></i> L·ªãch s·ª≠ th√¥ng b√°o</h1>
    <p>Qu·∫£n l√Ω v√† theo d√µi t·∫•t c·∫£ th√¥ng b√°o ƒë√£ g·ª≠i trong h·ªá th·ªëng</p>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Danh s√°ch Th√¥ng b√°o</h3>
        <div class="card-actions">
            <button class="btn btn-primary" onclick="showSendNotificationModal()">
                <i class="fas fa-paper-plane"></i> G·ª≠i th√¥ng b√°o m·ªõi
            </button>
            <button class="btn btn-secondary" onclick="refreshNotifications()">
                <i class="fas fa-sync-alt"></i> L√†m m·ªõi
            </button>
            <button class="btn btn-info" onclick="exportNotifications()">
                <i class="fas fa-download"></i> Xu·∫•t d·ªØ li·ªáu
            </button>
        </div>
    </div>
    
    <!-- Filters -->
    <div class="filters-section">
        <div class="filter-group">
            <label for="typeFilter">Lo·∫°i:</label>
            <select id="typeFilter" class="form-select" onchange="filterNotifications()">
                <option value="">T·∫•t c·∫£</option>
                <option value="email">Email</option>
                <option value="sms">SMS</option>
                <option value="push">Push Notification</option>
                <option value="telegram">Telegram</option>
            </select>
        </div>
        
        <div class="filter-group">
            <label for="statusFilter">Tr·∫°ng th√°i:</label>
            <select id="statusFilter" class="form-select" onchange="filterNotifications()">
                <option value="">T·∫•t c·∫£</option>
                <option value="sent">ƒê√£ g·ª≠i</option>
                <option value="delivered">ƒê√£ nh·∫≠n</option>
                <option value="failed">Th·∫•t b·∫°i</option>
                <option value="pending">ƒêang ch·ªù</option>
            </select>
        </div>
        
        <div class="filter-group">
            <label for="dateFilter">Ng√†y:</label>
            <input type="date" id="dateFilter" class="form-input" onchange="filterNotifications()">
        </div>
        
        <div class="filter-group">
            <label for="searchFilter">T√¨m ki·∫øm:</label>
            <input type="text" id="searchFilter" class="form-input" placeholder="T√¨m theo ng∆∞·ªùi nh·∫≠n, ti√™u ƒë·ªÅ..." onkeyup="filterNotifications()">
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="stats-cards">
        <div class="stat-card">
            <div class="stat-icon total">üìä</div>
            <div class="stat-content">
                <div class="stat-number" id="totalNotifications">0</div>
                <div class="stat-label">T·ªïng th√¥ng b√°o</div>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon sent">‚úÖ</div>
            <div class="stat-content">
                <div class="stat-number" id="sentNotifications">0</div>
                <div class="stat-label">ƒê√£ g·ª≠i</div>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon delivered">üì®</div>
            <div class="stat-content">
                <div class="stat-number" id="deliveredNotifications">0</div>
                <div class="stat-label">ƒê√£ nh·∫≠n</div>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon failed">‚ùå</div>
            <div class="stat-content">
                <div class="stat-number" id="failedNotifications">0</div>
                <div class="stat-label">Th·∫•t b·∫°i</div>
            </div>
        </div>
    </div>

    <!-- Notifications Table -->
    <div class="table-container">
        <table class="table" id="notificationsTable">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Ng∆∞·ªùi nh·∫≠n</th>
                    <th>Lo·∫°i</th>
                    <th>Ti√™u ƒë·ªÅ</th>
                    <th>Tr·∫°ng th√°i</th>
                    <th>Th·ªùi gian g·ª≠i</th>
                    <th>Th·ªùi gian nh·∫≠n</th>
                    <th>Thao t√°c</th>
                </tr>
            </thead>
            <tbody id="notificationsTableBody">
                <tr>
                    <td colspan="8" class="text-center text-muted">
                        <i class="fas fa-spinner fa-spin"></i> ƒêang t·∫£i d·ªØ li·ªáu...
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <div class="pagination" id="notificationsPagination" style="display: none;">
        <!-- Pagination controls will be generated here -->
    </div>
</div>

<!-- Send Notification Modal -->
<div id="sendNotificationModal" class="modal" style="display: none;">
    <div class="modal-content" style="max-width: 800px;">
        <div class="modal-header">
            <h3>G·ª≠i th√¥ng b√°o m·ªõi</h3>
            <span class="close" onclick="closeSendNotificationModal()">&times;</span>
        </div>
        
        <form id="sendNotificationForm">
            <div class="modal-body">
                <div class="form-row">
                    <div class="form-group">
                        <label for="notificationType" class="form-label">Lo·∫°i th√¥ng b√°o *</label>
                        <select id="notificationType" name="type" class="form-input form-select" required onchange="loadTemplates()">
                            <option value="">Ch·ªçn lo·∫°i...</option>
                            <option value="email">Email</option>
                            <option value="sms">SMS</option>
                            <option value="push">Push Notification</option>
                            <option value="telegram">Telegram</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="notificationTemplate" class="form-label">M·∫´u th√¥ng b√°o</label>
                        <select id="notificationTemplate" name="template_id" class="form-input form-select" onchange="loadTemplateContent()">
                            <option value="">Ch·ªçn m·∫´u...</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="notificationRecipients" class="form-label">Ng∆∞·ªùi nh·∫≠n *</label>
                    <textarea id="notificationRecipients" name="recipients" class="form-input form-textarea" rows="3" placeholder="Nh·∫≠p email, s·ªë ƒëi·ªán tho·∫°i ho·∫∑c ID ng∆∞·ªùi d√πng (m·ªói d√≤ng m·ªôt ng∆∞·ªùi)" required></textarea>
                    <small class="text-muted">H·ªó tr·ª£: email, s·ªë ƒëi·ªán tho·∫°i, user ID. M·ªói d√≤ng m·ªôt ng∆∞·ªùi nh·∫≠n.</small>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="notificationSubject" class="form-label">Ti√™u ƒë·ªÅ *</label>
                        <input type="text" id="notificationSubject" name="subject" class="form-input" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="notificationPriority" class="form-label">ƒê·ªô ∆∞u ti√™n</label>
                        <select id="notificationPriority" name="priority" class="form-input form-select">
                            <option value="low">Th·∫•p</option>
                            <option value="normal" selected>B√¨nh th∆∞·ªùng</option>
                            <option value="high">Cao</option>
                            <option value="urgent">Kh·∫©n c·∫•p</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="notificationContent" class="form-label">N·ªôi dung *</label>
                    <textarea id="notificationContent" name="content" class="form-input form-textarea" rows="6" required></textarea>
                </div>
                
                <div class="form-group">
                    <label for="notificationSchedule" class="form-label">L√™n l·ªãch g·ª≠i</label>
                    <input type="datetime-local" id="notificationSchedule" name="scheduled_at" class="form-input">
                    <small class="text-muted">ƒê·ªÉ tr·ªëng ƒë·ªÉ g·ª≠i ngay l·∫≠p t·ª©c</small>
                </div>
            </div>
            
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeSendNotificationModal()">H·ªßy</button>
                <button type="button" class="btn btn-info" onclick="previewNotification()">Xem tr∆∞·ªõc</button>
                <button type="submit" class="btn btn-primary">G·ª≠i th√¥ng b√°o</button>
            </div>
        </form>
    </div>
</div>

<!-- Notification Details Modal -->
<div id="notificationDetailsModal" class="modal" style="display: none;">
    <div class="modal-content" style="max-width: 700px;">
        <div class="modal-header">
            <h3>Chi ti·∫øt th√¥ng b√°o</h3>
            <span class="close" onclick="closeNotificationDetailsModal()">&times;</span>
        </div>
        
        <div class="modal-body" id="notificationDetailsContent">
            <!-- Notification details will be loaded here -->
        </div>
        
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" onclick="closeNotificationDetailsModal()">ƒê√≥ng</button>
        </div>
    </div>
</div>

<script>
let notifications = [];
let templates = [];
let currentPage = 1;
const itemsPerPage = 20;

document.addEventListener('DOMContentLoaded', function() {
    loadNotifications();
    setupEventListeners();
});

function setupEventListeners() {
    document.getElementById('sendNotificationForm').addEventListener('submit', function(e) {
        e.preventDefault();
        sendNotification();
    });
}

async function loadNotifications() {
    try {
        const response = await window.app.apiCall('notifications/history', 'GET');
        if (response.success) {
            notifications = response.notifications || [];
            renderNotificationsTable();
            updateStats();
        } else {
            showNotification('Kh√¥ng th·ªÉ t·∫£i danh s√°ch th√¥ng b√°o', 'error');
        }
    } catch (error) {
        console.error('Failed to load notifications:', error);
        showNotification('L·ªói k·∫øt n·ªëi server', 'error');
    }
}

function renderNotificationsTable() {
    const tbody = document.getElementById('notificationsTableBody');
    
    if (notifications.length === 0) {
        tbody.innerHTML = `<tr><td colspan="8" class="text-center text-muted"><i class="fas fa-inbox"></i> Kh√¥ng c√≥ th√¥ng b√°o n√†o</td></tr>`;
        return;
    }
    
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const pageNotifications = notifications.slice(startIndex, endIndex);
    
    tbody.innerHTML = pageNotifications.map(notification => `
        <tr>
            <td>${notification.id}</td>
            <td>
                <div class="recipient-info">
                    <div class="recipient-name">${notification.recipient_name || 'N/A'}</div>
                    <div class="recipient-contact">${notification.recipient_contact}</div>
                </div>
            </td>
            <td>
                <span class="type-badge type-${notification.type}">
                    ${getTypeIcon(notification.type)} ${getTypeText(notification.type)}
                </span>
            </td>
            <td>
                <div class="notification-title">${notification.subject}</div>
                <div class="notification-preview">${notification.content.substring(0, 50)}${notification.content.length > 50 ? '...' : ''}</div>
            </td>
            <td>
                <span class="status-badge status-${notification.status}">
                    ${getStatusIcon(notification.status)} ${getStatusText(notification.status)}
                </span>
            </td>
            <td>${formatDateTime(notification.sent_at)}</td>
            <td>${notification.delivered_at ? formatDateTime(notification.delivered_at) : 'N/A'}</td>
            <td>
                <div class="action-buttons">
                    <button class="btn btn-sm btn-outline" onclick="viewNotificationDetails(${notification.id})" title="Xem chi ti·∫øt">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-sm btn-info" onclick="resendNotification(${notification.id})" title="G·ª≠i l·∫°i" ${notification.status === 'failed' ? '' : 'disabled'}>
                        <i class="fas fa-redo"></i>
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="deleteNotification(${notification.id})" title="X√≥a">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </td>
        </tr>
    `).join('');
    
    updatePagination();
}

function updateStats() {
    const stats = {
        total: notifications.length,
        sent: notifications.filter(n => n.status === 'sent').length,
        delivered: notifications.filter(n => n.status === 'delivered').length,
        failed: notifications.filter(n => n.status === 'failed').length
    };
    
    document.getElementById('totalNotifications').textContent = stats.total;
    document.getElementById('sentNotifications').textContent = stats.sent;
    document.getElementById('deliveredNotifications').textContent = stats.delivered;
    document.getElementById('failedNotifications').textContent = stats.failed;
}

function filterNotifications() {
    const typeFilter = document.getElementById('typeFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;
    const dateFilter = document.getElementById('dateFilter').value;
    const searchFilter = document.getElementById('searchFilter').value.toLowerCase();
    
    let filteredNotifications = notifications;
    
    if (typeFilter) {
        filteredNotifications = filteredNotifications.filter(n => n.type === typeFilter);
    }
    
    if (statusFilter) {
        filteredNotifications = filteredNotifications.filter(n => n.status === statusFilter);
    }
    
    if (dateFilter) {
        filteredNotifications = filteredNotifications.filter(n => 
            n.sent_at && n.sent_at.startsWith(dateFilter)
        );
    }
    
    if (searchFilter) {
        filteredNotifications = filteredNotifications.filter(n => 
            n.recipient_name.toLowerCase().includes(searchFilter) ||
            n.recipient_contact.toLowerCase().includes(searchFilter) ||
            n.subject.toLowerCase().includes(searchFilter) ||
            n.content.toLowerCase().includes(searchFilter)
        );
    }
    
    const tbody = document.getElementById('notificationsTableBody');
    if (filteredNotifications.length === 0) {
        tbody.innerHTML = `<tr><td colspan="8" class="text-center text-muted"><i class="fas fa-search"></i> Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£</td></tr>`;
    } else {
        const startIndex = 0;
        const endIndex = itemsPerPage;
        const pageNotifications = filteredNotifications.slice(startIndex, endIndex);
        
        tbody.innerHTML = pageNotifications.map(notification => `
            <tr>
                <td>${notification.id}</td>
                <td>
                    <div class="recipient-info">
                        <div class="recipient-name">${notification.recipient_name || 'N/A'}</div>
                        <div class="recipient-contact">${notification.recipient_contact}</div>
                    </div>
                </td>
                <td>
                    <span class="type-badge type-${notification.type}">
                        ${getTypeIcon(notification.type)} ${getTypeText(notification.type)}
                    </span>
                </td>
                <td>
                    <div class="notification-title">${notification.subject}</div>
                    <div class="notification-preview">${notification.content.substring(0, 50)}${notification.content.length > 50 ? '...' : ''}</div>
                </td>
                <td>
                    <span class="status-badge status-${notification.status}">
                        ${getStatusIcon(notification.status)} ${getStatusText(notification.status)}
                    </span>
                </td>
                <td>${formatDateTime(notification.sent_at)}</td>
                <td>${notification.delivered_at ? formatDateTime(notification.delivered_at) : 'N/A'}</td>
                <td>
                    <div class="action-buttons">
                        <button class="btn btn-sm btn-outline" onclick="viewNotificationDetails(${notification.id})" title="Xem chi ti·∫øt">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-info" onclick="resendNotification(${notification.id})" title="G·ª≠i l·∫°i" ${notification.status === 'failed' ? '' : 'disabled'}>
                            <i class="fas fa-redo"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteNotification(${notification.id})" title="X√≥a">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');
    }
}

function updatePagination() {
    const totalPages = Math.ceil(notifications.length / itemsPerPage);
    const pagination = document.getElementById('notificationsPagination');
    
    if (totalPages <= 1) {
        pagination.style.display = 'none';
        return;
    }
    
    pagination.style.display = 'block';
    
    let paginationHTML = '';
    
    if (currentPage > 1) {
        paginationHTML += `<button class="btn btn-sm btn-outline" onclick="goToPage(${currentPage - 1})">Tr∆∞·ªõc</button>`;
    }
    
    for (let i = 1; i <= totalPages; i++) {
        if (i === currentPage) {
            paginationHTML += `<button class="btn btn-sm btn-primary">${i}</button>`;
        } else if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
            paginationHTML += `<button class="btn btn-sm btn-outline" onclick="goToPage(${i})">${i}</button>`;
        } else if (i === currentPage - 3 || i === currentPage + 3) {
            paginationHTML += `<span class="pagination-ellipsis">...</span>`;
        }
    }
    
    if (currentPage < totalPages) {
        paginationHTML += `<button class="btn btn-sm btn-outline" onclick="goToPage(${currentPage + 1})">Sau</button>`;
    }
    
    pagination.innerHTML = paginationHTML;
}

function goToPage(page) {
    currentPage = page;
    renderNotificationsTable();
}

// Modal functions
function showSendNotificationModal() {
    document.getElementById('sendNotificationModal').style.display = 'block';
    document.getElementById('sendNotificationForm').reset();
}

function closeSendNotificationModal() {
    document.getElementById('sendNotificationModal').style.display = 'none';
}

async function loadTemplates() {
    const type = document.getElementById('notificationType').value;
    if (!type) return;
    
    try {
        const response = await window.app.apiCall(`notifications/templates?type=${type}`, 'GET');
        if (response.success) {
            templates = response.templates || [];
            updateTemplateSelect();
        }
    } catch (error) {
        console.error('Failed to load templates:', error);
    }
}

function updateTemplateSelect() {
    const select = document.getElementById('notificationTemplate');
    select.innerHTML = '<option value="">Ch·ªçn m·∫´u...</option>';
    
    templates.forEach(template => {
        if (template.status === 'active') {
            select.innerHTML += `<option value="${template.id}">${template.name}</option>`;
        }
    });
}

function loadTemplateContent() {
    const templateId = document.getElementById('notificationTemplate').value;
    if (!templateId) return;
    
    const template = templates.find(t => t.id == templateId);
    if (template) {
        document.getElementById('notificationSubject').value = template.subject;
        document.getElementById('notificationContent').value = template.content;
    }
}

function previewNotification() {
    const form = document.getElementById('sendNotificationForm');
    const formData = new FormData(form);
    
    const previewData = {
        type: formData.get('type'),
        subject: formData.get('subject'),
        content: formData.get('content'),
        recipients: formData.get('recipients')
    };
    
    // Hi·ªÉn th·ªã preview ƒë∆°n gi·∫£n
    alert(`Xem tr∆∞·ªõc th√¥ng b√°o:\n\nLo·∫°i: ${previewData.type}\nTi√™u ƒë·ªÅ: ${previewData.subject}\nN·ªôi dung: ${previewData.content.substring(0, 100)}...\n\nNg∆∞·ªùi nh·∫≠n: ${previewData.recipients}`);
}

// API functions
async function sendNotification() {
    const form = document.getElementById('sendNotificationForm');
    const formData = new FormData(form);
    const submitBtn = form.querySelector('button[type="submit"]');
    const originalText = submitBtn.innerHTML;
    
    window.app.showLoading(submitBtn);
    
    try {
        const data = {
            type: formData.get('type'),
            recipients: formData.get('recipients').split('\n').filter(r => r.trim()),
            subject: formData.get('subject'),
            content: formData.get('content'),
            priority: formData.get('priority'),
            template_id: formData.get('template_id') || null,
            scheduled_at: formData.get('scheduled_at') || null
        };
        
        const response = await window.app.apiCall('notifications/send', 'POST', data);
        
        if (response.success) {
            showNotification('G·ª≠i th√¥ng b√°o th√†nh c√¥ng', 'success');
            closeSendNotificationModal();
            loadNotifications();
        } else {
            showNotification(response.message || 'C√≥ l·ªói x·∫£y ra', 'error');
        }
    } catch (error) {
        console.error('Failed to send notification:', error);
        showNotification('L·ªói k·∫øt n·ªëi server', 'error');
    } finally {
        window.app.hideLoading(submitBtn, originalText);
    }
}

async function viewNotificationDetails(notificationId) {
    try {
        const response = await window.app.apiCall(`notifications/${notificationId}`, 'GET');
        
        if (response.success) {
            const notification = response.notification;
            showNotificationDetailsModal(notification);
        } else {
            showNotification('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin th√¥ng b√°o', 'error');
        }
    } catch (error) {
        console.error('Failed to load notification details:', error);
        showNotification('L·ªói k·∫øt n·ªëi server', 'error');
    }
}

function showNotificationDetailsModal(notification) {
    const modal = document.getElementById('notificationDetailsModal');
    const content = document.getElementById('notificationDetailsContent');
    
    content.innerHTML = `
        <div class="notification-details">
            <div class="detail-row">
                <div class="detail-label">ID:</div>
                <div class="detail-value">${notification.id}</div>
            </div>
            <div class="detail-row">
                <div class="detail-label">Lo·∫°i:</div>
                <div class="detail-value">
                    <span class="type-badge type-${notification.type}">
                        ${getTypeIcon(notification.type)} ${getTypeText(notification.type)}
                    </span>
                </div>
            </div>
            <div class="detail-row">
                <div class="detail-label">Ng∆∞·ªùi nh·∫≠n:</div>
                <div class="detail-value">${notification.recipient_name || 'N/A'} (${notification.recipient_contact})</div>
            </div>
            <div class="detail-row">
                <div class="detail-label">Ti√™u ƒë·ªÅ:</div>
                <div class="detail-value">${notification.subject}</div>
            </div>
            <div class="detail-row">
                <div class="detail-label">N·ªôi dung:</div>
                <div class="detail-value">${notification.content}</div>
            </div>
            <div class="detail-row">
                <div class="detail-label">Tr·∫°ng th√°i:</div>
                <div class="detail-value">
                    <span class="status-badge status-${notification.status}">
                        ${getStatusIcon(notification.status)} ${getStatusText(notification.status)}
                    </span>
                </div>
            </div>
            <div class="detail-row">
                <div class="detail-label">Th·ªùi gian g·ª≠i:</div>
                <div class="detail-value">${formatDateTime(notification.sent_at)}</div>
            </div>
            <div class="detail-row">
                <div class="detail-label">Th·ªùi gian nh·∫≠n:</div>
                <div class="detail-value">${notification.delivered_at ? formatDateTime(notification.delivered_at) : 'N/A'}</div>
            </div>
            ${notification.error_message ? `
                <div class="detail-row">
                    <div class="detail-label">L·ªói:</div>
                    <div class="detail-value error-message">${notification.error_message}</div>
                </div>
            ` : ''}
        </div>
    `;
    
    modal.style.display = 'block';
}

function closeNotificationDetailsModal() {
    document.getElementById('notificationDetailsModal').style.display = 'none';
}

async function resendNotification(notificationId) {
    if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën g·ª≠i l·∫°i th√¥ng b√°o n√†y?')) return;
    
    try {
        const response = await window.app.apiCall(`notifications/${notificationId}/resend`, 'POST');
        
        if (response.success) {
            showNotification('G·ª≠i l·∫°i th√¥ng b√°o th√†nh c√¥ng', 'success');
            loadNotifications();
        } else {
            showNotification(response.message || 'C√≥ l·ªói x·∫£y ra', 'error');
        }
    } catch (error) {
        console.error('Failed to resend notification:', error);
        showNotification('L·ªói k·∫øt n·ªëi server', 'error');
    }
}

async function deleteNotification(notificationId) {
    if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th√¥ng b√°o n√†y?')) return;
    
    try {
        const response = await window.app.apiCall(`notifications/${notificationId}`, 'DELETE');
        
        if (response.success) {
            showNotification('X√≥a th√¥ng b√°o th√†nh c√¥ng', 'success');
            loadNotifications();
        } else {
            showNotification(response.message || 'C√≥ l·ªói x·∫£y ra', 'error');
        }
    } catch (error) {
        console.error('Failed to delete notification:', error);
        showNotification('L·ªói k·∫øt n·ªëi server', 'error');
    }
}

function refreshNotifications() {
    loadNotifications();
}

async function exportNotifications() {
    try {
        const response = await window.app.apiCall('notifications/export', 'GET');
        
        if (response.success && response.download_url) {
            const link = document.createElement('a');
            link.href = response.download_url;
            link.download = `notifications_${new Date().toISOString().split('T')[0]}.xlsx`;
            link.click();
            
            showNotification('Xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng', 'success');
        } else {
            showNotification('Kh√¥ng th·ªÉ xu·∫•t d·ªØ li·ªáu', 'error');
        }
    } catch (error) {
        console.error('Failed to export notifications:', error);
        showNotification('L·ªói khi xu·∫•t d·ªØ li·ªáu', 'error');
    }
}

// Utility functions
function formatDateTime(dateString) {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleString('vi-VN');
}

function getTypeIcon(type) {
    const icons = {
        'email': 'üìß',
        'sms': 'üì±',
        'push': 'üîî',
        'telegram': 'üì¨'
    };
    return icons[type] || 'üìÑ';
}

function getTypeText(type) {
    const texts = {
        'email': 'Email',
        'sms': 'SMS',
        'push': 'Push',
        'telegram': 'Telegram'
    };
    return texts[type] || type;
}

function getStatusIcon(status) {
    const icons = {
        'sent': '‚úÖ',
        'delivered': 'üì®',
        'failed': '‚ùå',
        'pending': 'üü°'
    };
    return icons[status] || '‚ùì';
}

function getStatusText(status) {
    const texts = {
        'sent': 'ƒê√£ g·ª≠i',
        'delivered': 'ƒê√£ nh·∫≠n',
        'failed': 'Th·∫•t b·∫°i',
        'pending': 'ƒêang ch·ªù'
    };
    return texts[status] || status;
}

function showNotification(message, type) {
    if (window.showNotification) {
        window.showNotification(message, type);
    } else {
        alert(message);
    }
}

// Close modals when clicking outside
window.onclick = function(event) {
    const modals = ['sendNotificationModal', 'notificationDetailsModal'];
    modals.forEach(modalId => {
        const modal = document.getElementById(modalId);
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
}
</script>
